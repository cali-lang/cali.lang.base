/* The following code was generated by JFlex 1.4_pre3 on 3/26/17 11:26 AM */

/*
 * Copyright 2017 Austin Lehman
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.cali;

import java.math.BigDecimal;
import java.math.BigInteger;

import java_cup.runtime.Symbol;
import com.cali.stdlib.console;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_pre3
 * on 3/26/17 11:26 AM from the specification file
 * <tt>file:/home/austin/eclipse/cali.lang.base/cali.lang.base/src/com/cali/Scanner.jflex</tt>
 */
class Lexer extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int YY_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int C_COMMENT = 1;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int STRING_LIT = 4;
  public static final int STRING_FRMT = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String yycmap_packed = 
    "\11\0\1\66\1\6\1\0\1\1\1\5\22\0\1\1\1\54\1\63"+
    "\1\61\1\0\1\53\1\57\1\64\1\41\1\42\1\52\1\50\1\40"+
    "\1\51\1\3\1\10\12\2\1\37\1\7\1\55\1\47\1\56\1\0"+
    "\1\62\32\4\1\45\1\65\1\46\1\0\1\4\1\0\1\13\1\24"+
    "\1\11\1\22\1\15\1\35\1\4\1\33\1\21\1\4\1\36\1\12"+
    "\1\20\1\16\1\26\1\23\1\4\1\25\1\14\1\27\1\17\1\30"+
    "\1\34\1\31\1\32\1\4\1\43\1\60\1\44\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] yycmap = yy_unpack_cmap(yycmap_packed);


  /** 
   * Translates a state to a row index in the transition table (packed version)
   */
  final private static String yy_rowMap_packed = 
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u0113\0\u014a\0\u0181\0\u01b8"+
    "\0\u01ef\0\u0113\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7"+
    "\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0113\0\u0113\0\u0113\0\u0113"+
    "\0\u0113\0\u0113\0\u0113\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u0113\0\u074e\0\u0785\0\u0113\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0113\0\u0898\0\u08cf\0\u0113\0\u0113\0\u0113\0\u0906\0\u093d\0\u0113"+
    "\0\u0974\0\u0113\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0113\0\u0113\0\u0abe"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u01b8"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113\0\u0113"+
    "\0\u0113\0\u0113\0\u0113\0\u0113\0\u0f0a\0\u0f41\0\u0113\0\u0113\0\u0113\0\u0f78"+
    "\0\u0faf\0\u0113\0\u0a19\0\u0113\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u1167\0\u01b8\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\u1356\0\u138d\0\u01b8\0\u13c4\0\u13fb\0\u1432\0\u01b8\0\u0113\0\u1469"+
    "\0\u14a0\0\u01b8\0\u14d7\0\u150e\0\u1545\0\u01b8\0\u01b8\0\u157c\0\u01b8\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u01b8\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u01b8\0\u01b8\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u01b8\0\u1a36\0\u01b8\0\u01b8\0\u01b8\0\u1a6d\0\u01b8"+
    "\0\u01b8\0\u01b8\0\u1aa4\0\u1adb\0\u1b12\0\u01b8\0\u1b49\0\u1b80\0\u01b8\0\u0113"+
    "\0\u01b8\0\u1bb7\0\u01b8\0\u01b8\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u01b8\0\u01b8";

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int [] yy_rowMap = yy_unpack_rowMap(yy_rowMap_packed);


  /** 
   * Unpacks the compressed row translation table.
   *
   * @param packed   the packed row translation table
   * @return         the unpacked row translation table
   */
  private static int [] yy_unpack_rowMap(String packed) {
    int [] map = new int[400];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 400) {
      int high = ((int) packed.charAt(i++)) << 16;
      map[j++] = high | packed.charAt(i++);
    }
    return map;
  }
  /** 
   * The packed transition table of the DFA (part 0)
   */
  private static final String yy_packed0 = 
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\7\1\14"+
    "\1\15\1\16\2\12\1\17\1\20\1\21\2\12\1\22"+
    "\1\23\1\24\1\25\1\26\1\12\1\27\4\12\1\30"+
    "\1\31\1\12\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\6\1\7\6\60\1\7\43\60\1\61\14\60\5\62"+
    "\2\63\54\62\1\64\1\62\1\65\1\66\5\67\1\70"+
    "\1\71\54\67\1\72\1\67\1\73\1\74\5\75\2\63"+
    "\55\75\1\76\1\77\1\100\71\0\1\10\1\101\1\12"+
    "\4\0\26\12\33\0\1\102\65\0\1\12\1\0\1\12"+
    "\4\0\26\12\36\0\1\7\70\0\1\103\36\0\1\104"+
    "\2\0\1\105\16\0\1\12\1\0\1\12\4\0\1\12"+
    "\1\106\1\107\23\12\32\0\1\12\1\0\1\12\4\0"+
    "\16\12\1\110\4\12\1\111\2\12\32\0\1\12\1\0"+
    "\1\12\4\0\1\12\1\112\3\12\1\113\12\12\1\114"+
    "\5\12\32\0\1\12\1\0\1\12\4\0\4\12\1\115"+
    "\1\12\1\116\17\12\32\0\1\12\1\0\1\12\4\0"+
    "\5\12\1\117\16\12\1\120\1\12\32\0\1\12\1\0"+
    "\1\12\4\0\4\12\1\121\21\12\32\0\1\12\1\0"+
    "\1\12\4\0\6\12\1\122\5\12\1\123\11\12\32\0"+
    "\1\12\1\0\1\12\4\0\14\12\1\124\11\12\32\0"+
    "\1\12\1\0\1\12\4\0\4\12\1\125\21\12\32\0"+
    "\1\12\1\0\1\12\4\0\14\12\1\126\5\12\1\127"+
    "\3\12\32\0\1\12\1\0\1\12\4\0\22\12\1\130"+
    "\3\12\32\0\1\12\1\0\1\12\4\0\2\12\1\131"+
    "\12\12\1\132\10\12\67\0\1\133\76\0\1\134\66\0"+
    "\1\135\1\136\65\0\1\137\1\0\1\140\64\0\1\141"+
    "\66\0\1\142\66\0\1\143\66\0\1\144\66\0\1\145"+
    "\76\0\1\146\67\0\1\147\55\0\1\150\102\0\1\151"+
    "\3\0\6\60\1\0\43\60\1\0\14\60\6\152\1\0"+
    "\1\152\1\153\41\152\1\61\14\152\5\62\2\0\54\62"+
    "\1\0\1\62\1\0\1\62\5\0\2\63\57\0\1\63"+
    "\16\0\1\71\6\0\1\70\1\0\1\74\33\0\1\154"+
    "\1\0\1\155\1\0\5\62\2\63\54\62\1\0\1\62"+
    "\1\0\1\66\63\0\1\156\66\0\1\157\1\0\1\155"+
    "\1\0\5\75\2\0\55\75\2\0\1\75\16\0\1\71"+
    "\6\0\1\70\1\0\1\74\34\0\1\160\1\155\1\0"+
    "\5\75\2\63\55\75\2\0\1\100\2\0\1\161\67\0"+
    "\1\162\63\0\5\103\2\0\60\103\2\0\1\12\1\0"+
    "\1\12\4\0\2\12\1\163\23\12\32\0\1\12\1\0"+
    "\1\12\4\0\3\12\1\164\12\12\1\165\7\12\32\0"+
    "\1\12\1\0\1\12\4\0\2\12\1\166\23\12\32\0"+
    "\1\12\1\0\1\12\4\0\10\12\1\167\15\12\32\0"+
    "\1\12\1\0\1\12\4\0\3\12\1\170\22\12\32\0"+
    "\1\12\1\0\1\12\4\0\6\12\1\171\17\12\32\0"+
    "\1\12\1\0\1\12\4\0\16\12\1\172\7\12\32\0"+
    "\1\12\1\0\1\12\4\0\23\12\1\173\2\12\32\0"+
    "\1\12\1\0\1\12\4\0\1\12\1\174\24\12\32\0"+
    "\1\12\1\0\1\12\4\0\1\175\2\12\1\176\22\12"+
    "\32\0\1\12\1\0\1\12\4\0\24\12\1\177\1\12"+
    "\32\0\1\12\1\0\1\12\4\0\13\12\1\200\12\12"+
    "\32\0\1\12\1\0\1\12\4\0\10\12\1\201\4\12"+
    "\1\202\10\12\32\0\1\12\1\0\1\12\4\0\4\12"+
    "\1\203\21\12\32\0\1\12\1\0\1\12\4\0\16\12"+
    "\1\204\7\12\32\0\1\12\1\0\1\12\4\0\6\12"+
    "\1\205\12\12\1\206\4\12\32\0\1\12\1\0\1\12"+
    "\4\0\14\12\1\207\11\12\32\0\1\12\1\0\1\12"+
    "\4\0\10\12\1\210\15\12\32\0\1\12\1\0\1\12"+
    "\4\0\1\12\1\211\24\12\32\0\1\12\1\0\1\12"+
    "\4\0\14\12\1\212\11\12\113\0\1\213\3\0\6\152"+
    "\1\0\1\152\1\0\41\152\1\0\14\152\63\0\1\76"+
    "\70\0\1\214\3\0\1\12\1\0\1\12\4\0\3\12"+
    "\1\215\22\12\32\0\1\12\1\0\1\12\4\0\4\12"+
    "\1\216\21\12\32\0\1\12\1\0\1\12\4\0\1\217"+
    "\25\12\32\0\1\12\1\0\1\12\4\0\16\12\1\220"+
    "\7\12\32\0\1\12\1\0\1\12\4\0\16\12\1\221"+
    "\7\12\32\0\1\12\1\0\1\12\4\0\4\12\1\222"+
    "\21\12\32\0\1\12\1\0\1\12\4\0\7\12\1\223"+
    "\16\12\32\0\1\12\1\0\1\12\4\0\4\12\1\224"+
    "\21\12\32\0\1\12\1\0\1\12\4\0\1\12\1\225"+
    "\24\12\32\0\1\12\1\0\1\12\4\0\1\12\1\226"+
    "\24\12\32\0\1\12\1\0\1\12\4\0\16\12\1\227"+
    "\7\12\32\0\1\12\1\0\1\12\4\0\2\12\1\230"+
    "\23\12\32\0\1\12\1\0\1\12\4\0\1\12\1\231"+
    "\24\12\32\0\1\12\1\0\1\12\4\0\17\12\1\232"+
    "\6\12\32\0\1\12\1\0\1\12\4\0\16\12\1\233"+
    "\7\12\32\0\1\12\1\0\1\12\4\0\2\12\1\234"+
    "\23\12\32\0\1\12\1\0\1\12\4\0\6\12\1\235"+
    "\17\12\32\0\1\12\1\0\1\12\4\0\4\12\1\236"+
    "\21\12\32\0\1\12\1\0\1\12\4\0\15\12\1\237"+
    "\10\12\32\0\1\12\1\0\1\12\4\0\1\12\1\240"+
    "\24\12\32\0\1\12\1\0\1\12\4\0\3\12\1\241"+
    "\22\12\113\0\1\242\5\0\1\12\1\0\1\12\4\0"+
    "\3\12\1\243\22\12\32\0\1\12\1\0\1\12\4\0"+
    "\22\12\1\244\3\12\32\0\1\12\1\0\1\12\4\0"+
    "\10\12\1\245\15\12\32\0\1\12\1\0\1\12\4\0"+
    "\1\246\25\12\32\0\1\12\1\0\1\12\4\0\14\12"+
    "\1\247\11\12\32\0\1\12\1\0\1\12\4\0\6\12"+
    "\1\250\17\12\32\0\1\12\1\0\1\12\4\0\2\12"+
    "\1\251\23\12\32\0\1\12\1\0\1\12\4\0\6\12"+
    "\1\252\17\12\32\0\1\12\1\0\1\12\4\0\10\12"+
    "\1\253\15\12\32\0\1\12\1\0\1\12\4\0\2\12"+
    "\1\254\23\12\32\0\1\12\1\0\1\12\4\0\4\12"+
    "\1\255\21\12\32\0\1\12\1\0\1\12\4\0\25\12"+
    "\1\256\32\0\1\12\1\0\1\12\4\0\14\12\1\257"+
    "\11\12\32\0\1\12\1\0\1\12\4\0\23\12\1\260"+
    "\2\12\32\0\1\12\1\0\1\12\4\0\4\12\1\261"+
    "\21\12\32\0\1\12\1\0\1\12\4\0\4\12\1\262"+
    "\21\12\115\0\1\263\3\0\1\12\1\0\1\12\4\0"+
    "\1\264\25\12\32\0\1\12\1\0\1\12\4\0\22\12"+
    "\1\265\3\12\32\0\1\12\1\0\1\12\4\0\5\12"+
    "\1\266\20\12\32\0\1\12\1\0\1\12\4\0\11\12"+
    "\1\267\14\12\32\0\1\12\1\0\1\12\4\0\5\12"+
    "\1\270\20\12\32\0\1\12\1\0\1\12\4\0\1\12"+
    "\1\271\24\12\32\0\1\12\1\0\1\12\4\0\1\272"+
    "\25\12\32\0\1\12\1\0\1\12\4\0\16\12\1\273"+
    "\7\12\32\0\1\12\1\0\1\12\4\0\1\274\25\12"+
    "\32\0\1\12\1\0\1\12\4\0\5\12\1\275\20\12"+
    "\113\0\1\276\5\0\1\12\1\0\1\12\4\0\4\12"+
    "\1\277\21\12\32\0\1\12\1\0\1\12\4\0\1\300"+
    "\25\12\32\0\1\12\1\0\1\12\4\0\16\12\1\301"+
    "\7\12\32\0\1\12\1\0\1\12\4\0\4\12\1\302"+
    "\21\12\32\0\1\12\1\0\1\12\4\0\16\12\1\303"+
    "\7\12\32\0\1\12\1\0\1\12\4\0\4\12\1\304"+
    "\21\12\32\0\1\12\1\0\1\12\4\0\4\12\1\305"+
    "\21\12\32\0\1\12\1\0\1\12\4\0\15\12\1\306"+
    "\10\12\32\0\1\12\1\0\1\12\4\0\11\12\1\307"+
    "\14\12\32\0\1\12\1\0\1\12\4\0\24\12\1\310"+
    "\1\12\30\0";

  /** 
   * The transition table of the DFA
   */
  private static final int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final byte YY_ATTRIBUTE[] = {
     1,  1,  0,  0,  0,  9,  9,  1,  1,  1,  1,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1, 
     1,  1,  1,  9,  1,  1,  9,  9,  9,  1,  1,  9,  1,  9,  1,  1, 
     0,  0,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9,  0,  1,  9,  9,  9,  0,  0,  9, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int sym) {
    return new Symbol(sym, yyline+1, yycolumn+1);
  }
  
  private Symbol symbol(int sym, Object val) {
    return new Symbol(sym, yyline+1, yycolumn+1, val);
  }
  
  private void error(String message) {
    console.get().err("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[7370];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 199: 
          {  return symbol(sym.INSTANCEOF);  }
        case 201: break;
        case 177: 
          {  return symbol(sym.BOOL, false);  }
        case 202: break;
        case 138: 
          {  string.setLength(0); yybegin(STRING_FRMT);  }
        case 203: break;
        case 157: 
          {  return symbol(sym.BOOL, true);  }
        case 204: break;
        case 50: 
          {  /* Do nothing. */  }
        case 205: break;
        case 198: 
          {  return symbol(sym.PROTECTED);  }
        case 206: break;
        case 29: 
          {  return symbol(sym.LBRACKET);  }
        case 207: break;
        case 30: 
          {  return symbol(sym.RBRACKET);  }
        case 208: break;
        case 90: 
          {  return symbol(sym.CALLBACK);  }
        case 209: break;
        case 97: 
          {  return symbol(sym.MODULUSEQ);  }
        case 210: break;
        case 113: 
          {  return symbol(sym.ETCETERA);  }
        case 211: break;
        case 162: 
          {  return symbol(sym.CLASSDEF);  }
        case 212: break;
        case 48: 
        case 105: 
          {  /* ignore */  }
        case 213: break;
        case 40: 
          {  return symbol(sym.GT);  }
        case 214: break;
        case 39: 
          {  return symbol(sym.LT);  }
        case 215: break;
        case 38: 
          {  return symbol(sym.NOT);  }
        case 216: break;
        case 36: 
          {  return symbol(sym.MU);  }
        case 217: break;
        case 35: 
          {  return symbol(sym.MI);  }
        case 218: break;
        case 34: 
          {  return symbol(sym.PL);  }
        case 219: break;
        case 12: 
          {  return symbol(sym.DI);  }
        case 220: break;
        case 8: 
          {  return symbol(sym.DOT);  }
        case 221: break;
        case 6: 
          {  /* ignore */  }
        case 222: break;
        case 1: 
        case 47: 
          {  /* ignore */  }
        case 223: break;
        case 33: 
          {  return symbol(sym.EQ);  }
        case 224: break;
        case 66: 
          {  /* ignore */  }
        case 225: break;
        case 79: 
          {  return symbol(sym.IF);  }
        case 226: break;
        case 101: 
          {  return symbol(sym.AND);  }
        case 227: break;
        case 102: 
          {  return symbol(sym.OR);  }
        case 228: break;
        case 122: 
          {  return symbol(sym.NEW);  }
        case 229: break;
        case 133: 
          {  return symbol(sym.TRY);  }
        case 230: break;
        case 137: 
          {  return symbol(sym.FOR);  }
        case 231: break;
        case 176: 
          {  return symbol(sym.WHILE);  }
        case 232: break;
        case 175: 
          {  return symbol(sym.THROW);  }
        case 233: break;
        case 173: 
          {  return symbol(sym.BREAK);  }
        case 234: break;
        case 43: 
          {  return symbol(sym.COUNT);  }
        case 235: break;
        case 11: 
          {  return symbol(sym.SEMI);  }
        case 236: break;
        case 25: 
          {  return symbol(sym.COLON);  }
        case 237: break;
        case 26: 
          {  return symbol(sym.COMMA);  }
        case 238: break;
        case 67: 
          {  return symbol(sym.DIEQ);  }
        case 239: break;
        case 91: 
          {  return symbol(sym.EQEQ);  }
        case 240: break;
        case 92: 
          {  return symbol(sym.PLEQ);  }
        case 241: break;
        case 93: 
          {  return symbol(sym.PLPL);  }
        case 242: break;
        case 94: 
          {  return symbol(sym.MIEQ);  }
        case 243: break;
        case 95: 
          {  return symbol(sym.MIMI);  }
        case 244: break;
        case 96: 
          {  return symbol(sym.MUEQ);  }
        case 245: break;
        case 98: 
          {  return symbol(sym.NOTEQ);  }
        case 246: break;
        case 99: 
          {  return symbol(sym.LTEQ);  }
        case 247: break;
        case 100: 
          {  return symbol(sym.GTEQ);  }
        case 248: break;
        case 141: 
          {  return symbol(sym.CASE);  }
        case 249: break;
        case 145: 
          {  return symbol(sym.ELSE);  }
        case 250: break;
        case 146: 
          {  return symbol(sym.ENUM);  }
        case 251: break;
        case 148: 
          {  return symbol(sym.NULL);  }
        case 252: break;
        case 163: 
          {  return symbol(sym.CATCH);  }
        case 253: break;
        case 59: 
          {  string.append('\t');  }
        case 254: break;
        case 56: 
          {  string.append('\n');  }
        case 255: break;
        case 55: 
          {  string.append('\r');  }
        case 256: break;
        case 107: 
          {  string.append('\"');  }
        case 257: break;
        case 108: 
          {  string.append("\\");  }
        case 258: break;
        case 111: 
          {  string.append('\'');  }
        case 259: break;
        case 189: 
          {  string.append("\"\"\"");  }
        case 260: break;
        case 61: 
          { 
								yybegin(YYINITIAL); 
								return symbol(sym.STRING, string.toString()); 
							 }
        case 261: break;
        case 68: 
          {  yybegin(C_COMMENT);  }
        case 262: break;
        case 106: 
          {  yybegin(YYINITIAL);  }
        case 263: break;
        case 51: 
          { 
								yybegin(YYINITIAL); 
								return symbol(sym.STRING, 
								string.toString()); 
							 }
        case 264: break;
        case 0: 
        case 9: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 134: 
        case 135: 
        case 136: 
        case 140: 
        case 142: 
        case 143: 
        case 144: 
        case 147: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 158: 
        case 159: 
        case 160: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 174: 
        case 182: 
        case 183: 
        case 184: 
        case 186: 
        case 187: 
        case 191: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
          {  return symbol(sym.IDENT, yytext());  }
        case 265: break;
        case 45: 
          {  string.setLength(0); yybegin(STRING);  }
        case 266: break;
        case 193: 
          {  return symbol(sym.PRIVATE);  }
        case 267: break;
        case 192: 
          {  return symbol(sym.DEFAULT);  }
        case 268: break;
        case 190: 
          {  return symbol(sym.INCLUDE);  }
        case 269: break;
        case 188: 
          {  return symbol(sym.RETURN);  }
        case 270: break;
        case 185: 
          {  return symbol(sym.PUBLIC);  }
        case 271: break;
        case 181: 
          {  return symbol(sym.EXTERN);  }
        case 272: break;
        case 180: 
          {  return symbol(sym.SWITCH);  }
        case 273: break;
        case 179: 
          {  return symbol(sym.STATIC);  }
        case 274: break;
        case 54: 
        case 57: 
        case 58: 
          {  string.append( yytext() );  }
        case 275: break;
        case 49: 
        case 53: 
          {  string.append( yytext() );  }
        case 276: break;
        case 37: 
          {  return symbol(sym.MODULUS);  }
        case 277: break;
        case 27: 
          {  return symbol(sym.LPAREN);  }
        case 278: break;
        case 28: 
          {  return symbol(sym.RPAREN);  }
        case 279: break;
        case 31: 
          {  return symbol(sym.LBRACE);  }
        case 280: break;
        case 32: 
          {  return symbol(sym.RBRACE);  }
        case 281: break;
        case 60: 
        case 63: 
          {  string.append( yytext() );  }
        case 282: break;
        case 103: 
          {  return symbol(sym.INSERT);  }
        case 283: break;
        case 46: 
          {  string.setLength(0); yybegin(STRING_LIT);  }
        case 284: break;
        case 5: 
        case 10: 
        case 41: 
        case 42: 
        case 44: 
        case 52: 
        case 62: 
          {   /* throw new Error("Illegal character <" + String.ValueOf((int)yytext()) + ">");*/
							error("Illegal character <" + String.valueOf((int)yytext().charAt(0)) + ">");
						 }
        case 285: break;
        case 7: 
        case 112: 
          { 
								if(yytext().contains("."))
								{
									BigDecimal val = null;
									try{ val = new BigDecimal(yytext()); }
									catch(NumberFormatException e)
									{
										error("Number format exception <" + yytext() + ">");
									}
									return symbol(sym.DOUBLE, val);
								}
								else
								{
									BigInteger val = null;
									try{ val = new BigInteger(yytext()); }
									catch(NumberFormatException e)
									{
										error("Number format exception <" + yytext() + ">");
									}
									return symbol(sym.INT, val);
								}
							 }
        case 286: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbol( sym.EOF );
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
