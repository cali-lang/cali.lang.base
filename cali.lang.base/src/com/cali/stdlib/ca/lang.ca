/*
 * lang.ca
 */
extern class bool : com.cali.types.CaliBool {
	public extern toInt();
	public extern toDouble();
	public extern toString();
	public extern compare(bool Val);
	public extern parse(string Val);
	public extern toJson();
	public extern pack();
}

static extern class Bool : com.cali.stdlib.SBool {
	public extern parse(string Val);
}

extern class int : com.cali.types.CaliInt {
	public extern toDouble();
	public extern toBool();
	public extern toString();
	public extern compare(int Val);
	public extern numLeadingZeros();
	public extern numTrailingZeros();
	public extern reverse();
	public extern reverseBytes();
	public extern rotateLeft(int Distance);
	public extern rotateRight(int Distance);
	public extern signum();
	public extern toBinary();
	public extern toHex();
	public extern toOctal();
	public extern parse(string Str, int Radix = null);
	public extern toJson();
	public extern pack();
}

static extern class Int : com.cali.stdlib.SInt {
	public extern maxVal();
	public extern minVal();
	public extern parse(string Str, int Radix = null);
}

extern class double : com.cali.types.CaliDouble {
	public extern toInt();
	public extern toBool();
	public extern toString();
	public extern compare(double Val2);
	public extern isInfinite();
	public extern isNan();
	public extern parse(string Val);
	public extern toHex();
	public extern toJson();
	public extern pack();
}

static extern class Double : com.cali.stdlib.SDouble {
	public extern maxExp();
	public extern maxVal();
	public extern minExp();
	public extern minNormal();
	public extern minVal();
	public extern nanVal();
	public extern negInfinity();
	public extern posInfinity();
	public extern size();
	public extern parse(string Val);
}

extern class string : com.cali.types.CaliString {
	public extern charAt(int Index);
	public extern compare(string Str);
	public extern compareICase(string Str);
	public extern concat(string Str);
	public extern contains(string Needle);
	public extern endsWith(string Suffix);
	public extern equals(string Str);
	public extern equalsICase(string Str);
	public extern indexOf(string Needle);
	public extern indexOfStart(string Needle, int StartIndex);
	public extern isEmpty();
	public extern lastIndexOf(string Needle);
	public extern lastIndexOfStart(string Needle, int StartIndex);
	public extern length();
	public extern matches(string Regex);
	public extern replace(string Find, string Replace);
	public extern replaceFirstRegex(string Regex, string Replace);
	public extern replaceRegex(string Regex, string Replace);
	public extern split(string Delim, bool AllowBlanks = false);
	public extern startsWith(string Prefix);
	public extern substr(int Index, int EndIndex = null);
	public extern toLower();
	public extern toUpper();
	public extern trim();
	public extern toJson();
	public extern pack();
}

extern class list : com.cali.types.CaliList {
	public extern add(ItemToAdd);
	public extern addAll(list ListToAdd);
	public extern addAllAt(list ListToAdd, int Index);
	public extern clear();
	public extern clone();
	public extern contains(Item);
	public extern containsObjRef(Item);
	public extern get(int Index);
	public extern indexOf(Item);
	public extern isEmpty();
	public extern remove(Item);
	public extern removeAt(int Index);
	public extern removeAll(list ListToRemove);
	public extern retainAll(list ListToRetain);
	public extern set(int Index, Item);
	public extern size();
	public extern subList(int StartIndex, int EndIndex);
	public extern sort();
	public extern sortAsc();
	public extern join(string Glue);
	public extern sortCustom(callback OnCompare);
	public extern toJson();
	public extern pack();
}

extern class map : com.cali.types.CaliMap {
	public extern clear();
	public extern containsKey(string Key);
	public extern containsVal(Val);
	public extern get(string Key);
	public extern isEmpty();
	public extern keySet();
	public extern put(string Key, Val);
	public extern putAll(map ToAdd);
	public extern putIfAbsent(string Key, Val);
	public extern remove(string Key);
	public extern size();
	public extern values();
	public extern toJson();
	public extern pack();
}

extern class object : com.cali.types.CaliObject {
	public extern toJson();
	public extern pack();
}

extern class callback : com.cali.types.CaliCallback {
	public call(...) { return this._call(etc); }
	private extern _call(list args);
}

extern class cnull : com.cali.types.CaliNull {
	public extern toJson();
	public extern pack();
}

	    
/*
 * exception
 */
extern class exception : com.cali.types.CaliException {
	// Getters
	public extern getLineNumber();
	public extern getExceptionType();
	public extern getId();
	public extern getText();
	public extern getDetails();
	public extern getStackTrace();
	
	public printStackTrace() { c.println(this.getStackTrace()); }
	
	public toString() {
		estr = "line " + this.getLineNumber() + ": " + this.getExceptionType() + " Exception. [" + this.getId() + "] :: " + this.getDetails();
		estr += "\n" + this.getStackTrace();
		return estr;
	}
}

	    
/*
 * console
 */
static extern class c : com.cali.stdlib.console {
	// Console functions
	public log(Content) { this._log(Content); return this; }
	public info(Content) { this._info(Content); return this; }
	public warn(Content) { this._warn(Content); return this; }
	public err(Content) { this._err(Content); return this; }
	public print(Content) { this._print(Content); return this; }
	public println(Content) { this._println(Content); return this; }
	
	// Chained extern functions
	private extern _log(Content);
	private extern _info(Content);
	private extern _warn(Content);
	private extern _err(Content);
	private extern _print(Content);
	private extern _println(Content);
}

	    
/*
 * date
 */
extern class date : com.cali.stdlib.CDate {
	// Create new date.
	public date(int Mills = null) {
		return this.newDate(Mills);
	}
	public extern newDate(int Mills = null);
	
	public extern getHours();
	public extern getMinutes();
	public extern getSeconds();
	public extern getTime();
	
	// Chained
	public setHours(int Hours) { this._setHours(Hours); return this; }
	public setMinutes(int Minutes) { this._setMinutes(Minutes); return this; }
	public setSeconds(int Seconds) { this._setSeconds(Seconds); return this; }
	public setTime(int TimeMills) { this._setTime(TimeMills); return this; }
	
	public extern toString();
	public extern parse(string DateString, string DateFormat);
	public extern format(string DateFormat = "yyyy-MM-dd HH:mm:ss.SSS Z");
	public extern isEpoch();
	
	// Chained extern functions
	private extern _setHours(int Hours);
	private extern _setMinutes(int Minutes);
	private extern _setSeconds(int Seconds);
	private extern _setTime(int TimeMills);
}

	    
/*
 * charset
 */
enum charset {
	us_ascii;
	iso_8859_1;
	utf_8;
	utf_16be;
	utf_16le;
	utf_16;
}

	    
/*
 * byte order
 */
enum byteOrder {
	big;
	little;
}

	    
/*
 * buffer
 */
extern class buffer : com.cali.stdlib.CBuffer {
	public buffer(int Size = 1024) {
		return this.newBuffer(Size);
	}
	private extern newBuffer(int Size = 1024);
	
	public extern size();
	public clear() { this._clear(); return this; }
	
	// Moves cursor to provided position
	public writeSeek(int Index) { this._writeSeek(Index); return this; }
	public readSeek(int Index) { this._readSeek(Index); return this; }
	
	// address
	public addString(string Str, string Charset = "utf_8") { this._addString(Str, Charset); return this; }
	public addByte(int Byte) { this._addByte(Byte); return this; }
	public addUByte(int Byte) { this._addUByte(Byte); return this; }
	public addShort(int Short, string ByteOrder = "big") { this._addShort(Short, ByteOrder); return this; }
	public addUShort(int Short, string ByteOrder = "big") { this._addUShort(Short, ByteOrder); return this; }
	public addInt(int Int, string ByteOrder = "big") { this._addInt(Int, ByteOrder); return this; }
	public addUInt(int Int, string ByteOrder = "big") { this._addUInt(Int, ByteOrder); return this; }
	public addLong(int Long, string ByteOrder = "big") { this._addLong(Long, ByteOrder); return this; }
	public addFloat(double Float, string ByteOrder = "big") { this._addFloat(Float, ByteOrder); return this; }
	public addDouble(double Double, string ByteOrder = "big") { this._addDouble(Double, ByteOrder); return this; }
	
	public extern getWriteCursor();
	public extern getReadCursor();
	public extern getString(string Charset = "utf_8");
	public extern getStringAt(int Length, int Index = -1, string Charset = "utf_8");
	public extern getByte(int Index = -1);
	public extern getUByte(int Index = -1);
	public extern getShort(int Index = -1, string ByteOrder = "big");
	public extern getUShort(int Inex = -1, string ByteOrder = "big");
	public extern getInt(int Index = -1, string ByteOrder = "big");
	public extern getUInt(int Index = -1, string ByteOrder = "big");
	public extern getLong(int Index = -1, string ByteOrder = "big");
	public extern getFloat(int Index = -1, string ByteOrder = "big");
	public extern getDouble(int Index = -1, string ByteOrder = "big");
	
	public extern setString(string Str, string Charset = "utf_8");
	public extern setStringAt(int Index, string Str, string Charset = "utf_8");
	
	// chained
	public setByte(int Index, int Byte, string ByteOrder = "big") { this._setByte(Index, Byte, ByteOrder); return this; }
	public setUByte(int Index, int Byte, string ByteOrder = "big") { this._setUByte(Index, Byte, ByteOrder); return this; }
	public setShort(int Index, int Short, string ByteOrder = "big") { this._setShort(Index, Short, ByteOrder); return this; }
	public setUShort(int Index, int Short, string ByteOrder = "big") { this._setUShort(Index, Short, ByteOrder); return this; }
	public setInt(int Index, int Int, string ByteOrder = "big") { this._setInt(Index, Int, ByteOrder); return this; }
	public setUInt(int Index, int Int, string ByteOrder = "big") { this._setUInt(Index, Int, ByteOrder); return this; }
	public setLong(int Index, int Long, string ByteOrder = "big") { this._setLong(Index, Long, ByteOrder); return this; }
	public setFloat(int Index, double Float, string ByteOrder = "big") { this._setFloat(Index, Float, ByteOrder); return this; }
	public setDouble(int Index, double Float, string ByteOrder = "big") { this._setDouble(Index, Float, ByteOrder); return this; }
	
	public copyFrom(int DestIndex, object Buffer, int SrcIndex = -1, int Length = -1) { this._copyFrom(DestIndex, Buffer, SrcIndex, Length); return this; }
	public copyTo(int SrcIndex, object Buffer, int DestIndex = -1, int Length = -1) { this._copyTo(SrcIndex, Buffer, DestIndex, Length); return this; }
	
	// Binary display functions
	public extern byteToBinary(int Index);
	public extern shortToBinary(int Index, string ByteOrder = "big");
	public extern intToBinary(int Index, string ByteOrder = "big");
	public extern longToBinary(int Index, string ByteOrder = "big");
	public extern floatToBinary(int Index, string ByteOrder = "big");
	public extern doubleToBinary(int Index, string ByteOrder = "big");
	
	private extern _clear();
	private extern _writeSeek(int Index);
	private extern _readSeek(int Index);
	
	private extern _addString(string Str, string Charset = "utf_8");
	private extern _addByte(int Byte);
	private extern _addUByte(int Byte);
	private extern _addShort(int Short, string ByteOrder = "big");
	private extern _addUShort(int Short, string ByteOrder = "big");
	private extern _addInt(int Int, string ByteOrder = "big");
	private extern _addUInt(int Int, string ByteOrder = "big");
	private extern _addLong(int Long, string ByteOrder = "big");
	private extern _addFloat(double Float, string ByteOrder = "big");
	private extern _addDouble(double Double, string ByteOrder = "big");
	
	private extern _setByte(int Index, int Byte, string ByteOrder = "big");
	private extern _setUByte(int Index, int Byte, string ByteOrder = "big");
	private extern _setShort(int Index, int Short, string ByteOrder = "big");
	private extern _setUShort(int Index, int Short, string ByteOrder = "big");
	private extern _setInt(int Index, int Int, string ByteOrder = "big");
	private extern _setUInt(int Index, int Int, string ByteOrder = "big");
	private extern _setLong(int Index, int Long, string ByteOrder = "big");
	private extern _setFloat(int Index, double Float, string ByteOrder = "big");
	private extern _setDouble(int Index, double Float, string ByteOrder = "big");
	
	private extern _copyFrom(int DestIndex, object Buffer, int SrcIndex = -1, int Length = -1);
	private extern _copyTo(int SrcIndex, object Buffer, int DestIndex = -1, int Length = -1);
}

	    
/*
 * lang
 */
static extern class lang : com.cali.stdlib.CLang {
	public extern type(DataType);
	public extern getClassCalidoc(string ClassName);
}

	    
/*
 * json
 */
static extern class json : com.cali.stdlib.CJson {
	public extern parse(string JsonString);
	public extern unpack(string JsonString);
}

	    
/*
 * secman - Security manager of the currently executing engine.
 */
static extern class secman : com.cali.stdlib.CSecMan {
	public extern getProp(string PropName);
	public extern keySet();
	public extern getMap();
	public extern setProp(string PropName, Value);
	public extern setMap(map PropsToSet);
}

	    
/*
 * securitymanager - Security manager object that can be instantiated 
 * and provided to an engine within cali.
 */
static extern class securitymanager : com.cali.stdlib.CSecurityManager {
	public extern getProp(string PropName);
	public extern keySet();
	public extern getMap();
	public extern setProp(string PropName, Value);
	public extern setMap(map PropsToSet);
}
