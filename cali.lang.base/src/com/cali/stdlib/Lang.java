/*
 * Copyright 2017 Austin Lehman
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.cali.stdlib;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class Lang{
	/**
	 * The single Lang instance.
	 */
	private static Lang instance = null;
	
	/**
	 * Default constructor set to private to defeat instantiation. See get to get an 
	 * instance of the object.
	 */
	private Lang() {
		this.init();
	}
	
	/**
	 * Gets a handle of the Universe object.
	 * @return
	 */
	public static Lang get() {
		if(instance == null) instance = new Lang();
		return instance;
	}
	
	public static final String langSrc = 
		"extern class bool : com.cali.types.CaliBool {\n"
	    + "public extern toInt();\n"
	    + "public extern toDouble();\n"
	    + "public extern toString();\n"
	    + "public extern compare(bool Val);\n"
	    + "public extern parse(string Val);\n"
	    + "}\n"
	    + "\n"
	    + "static extern class Bool : com.cali.stdlib.SBool {\n"
	    + "public extern parse(string Val);\n"
	    + "}\n"
	    + "\n"
	    + "extern class int : com.cali.types.CaliInt {\n"
	    + "public extern toDouble();\n"
	    + "public extern toBool();\n"
	    + "public extern toString();\n"
	    + "public extern compare(int Val);\n"
	    + "public extern numLeadingZeros();\n"
	    + "public extern numTrailingZeros();\n"
	    + "public extern reverse();\n"
	    + "public extern reverseBytes();\n"
	    + "public extern rotateLeft(int Distance);\n"
	    + "public extern rotateRight(int Distance);\n"
	    + "public extern signum();\n"
	    + "public extern toBinary();\n"
	    + "public extern toHex();\n"
	    + "public extern toOctal();\n"
	    + "public extern parse(string Str, int Radix = null);\n"
	    + "}\n"
	    + "\n"
	    + "static extern class Int : com.cali.stdlib.SInt {\n"
	    + "public extern maxVal();\n"
	    + "public extern minVal();\n"
	    + "public extern parse(string Str, int Radix = null);\n"
	    + "}\n"
	    + "\n"
	    + "extern class double : com.cali.types.CaliDouble {\n"
	    + "public extern toInt();\n"
	    + "public extern toBool();\n"
	    + "public extern toString();\n"
	    + "public extern compare(double Val2);\n"
	    + "public extern isInfinite();\n"
	    + "public extern isNan();\n"
	    + "public extern parse(string Val);\n"
	    + "public extern toHex();\n"
	    + "}\n"
	    + "\n"
	    + "static extern class Double : com.cali.stdlib.SDouble {\n"
	    + "public extern maxExp();\n"
	    + "public extern maxVal();\n"
	    + "public extern minExp();\n"
	    + "public extern minNormal();\n"
	    + "public extern minVal();\n"
	    + "public extern nanVal();\n"
	    + "public extern negInfinity();\n"
	    + "public extern posInfinity();\n"
	    + "public extern size();\n"
	    + "public extern parse(string Val);\n"
	    + "}\n"
	    + "\n"
	    + "extern class string : com.cali.types.CaliString {\n"
	    + "public extern charAt(int Index);\n"
	    + "public extern compare(string Str);\n"
	    + "public extern compareICase(string Str);\n"
	    + "public extern concat(string Str);\n"
	    + "public extern contains(string Needle);\n"
	    + "public extern endsWith(string Suffix);\n"
	    + "public extern equals(string Str);\n"
	    + "public extern equalsICase(string Str);\n"
	    + "public extern indexOf(string Needle);\n"
	    + "public extern indexOfStart(string Needle, int StartIndex);\n"
	    + "public extern isEmpty();\n"
	    + "public extern lastIndexOf(string Needle);\n"
	    + "public extern lastIndexOfStart(string Needle, int StartIndex);\n"
	    + "public extern length();\n"
	    + "public extern matches(string Regex);\n"
	    + "public extern replace(string Find, string Replace);\n"
	    + "public extern replaceFirstRegex(string Regex, string Replace);\n"
	    + "public extern replaceRegex(string Regex, string Replace);\n"
	    + "public extern split(string Delim, bool AllowBlanks = false);\n"
	    + "public extern startsWith(string Prefix);\n"
	    + "public extern substr(int Index, int EndIndex = null);\n"
	    + "public extern toLower();\n"
	    + "public extern toUpper();\n"
	    + "public extern trim();\n"
	    + "}\n"
	    + "\n"
	    + "extern class list : com.cali.types.CaliList {\n"
	    + "public extern add(ItemToAdd);\n"
	    + "public extern addAll(list ListToAdd);\n"
	    + "public extern addAllAt(list ListToAdd, int Index);\n"
	    + "public extern clear();\n"
	    + "public extern clone();\n"
	    + "public extern contains(Item);\n"
	    + "public extern containsObjRef(Item);\n"
	    + "public extern get(int Index);\n"
	    + "public extern indexOf(Item);\n"
	    + "public extern isEmpty();\n"
	    + "public extern remove(Item);\n"
	    + "public extern removeAt(int Index);\n"
	    + "public extern removeAll(list ListToRemove);\n"
	    + "public extern retainAll(list ListToRetain);\n"
	    + "public extern set(int Index, Item);\n"
	    + "public extern size();\n"
	    + "public extern subList(int StartIndex, int EndIndex);\n"
	    + "public extern sort();\n"
	    + "public extern sortAsc();\n"
	    + "public extern join(string Glue);\n"
	    + "public extern sortCustom(callback OnCompare);\n"
	    + "}\n"
	    + "\n"
	    + "extern class map : com.cali.types.CaliMap {\n"
	    + "public extern clear();\n"
	    + "public extern containsKey(string Key);\n"
	    + "public extern containsVal(Val);\n"
	    + "public extern get(string Key);\n"
	    + "public extern isEmpty();\n"
	    + "public extern keySet();\n"
	    + "public extern put(string Key, Val);\n"
	    + "public extern putAll(map ToAdd);\n"
	    + "public extern putIfAbsent(string Key, Val);\n"
	    + "public extern remove(string Key);\n"
	    + "public extern size();\n"
	    + "public extern values();\n"
	    + "}\n"
	    + "\n"
	    + "extern class callback : com.cali.types.CaliCallback {\n"
	    + "public call(...) { return this._call(etc); }\n"
	    + "private extern _call(list args);\n"
	    + "}\n"
	    + "\n"
	    + "extern class cnull : com.cali.types.CaliNull {\n"
	    + "}\n"
	    + "\n"
	    
	    /*
	     * exception
	     */
	    + "class exception {\n"
	    + "// Getters\n"
	    + "public extern getLineNumber();\n"
	    + "public extern getExceptionType();\n"
	    + "public extern getId();\n"
	    + "public extern getText();\n"
	    + "public extern getDetails();\n"
	    + "public extern getStackTrace();\n"
	    + "\n"
	    + "public printStackTrace() { c.println(this.getStackTrace()); }\n"
	    + "\n"
	    + "public toString() {\n"
	    + "estr = \"line \" + this.getLineNumber() + \": \" + this.getExceptionType() + \" Exception. [\" + this.getId() + \"] :: \" + this.getDetails();\n"
	    + "estr += \"\n\" + this.getStackTrace();\n"
	    + "return estr;\n"
	    + "}\n"
	    + "}\n"
	    + "\n"
	    /*
	     * console
	     */
	    + "static extern class c : com.cali.stdlib.console {\n"
	    + "// Console functions\n"
	    + "public log(Content) { this._log(Content); return this; }\n"
	    + "public info(Content) { this._info(Content); return this; }\n"
	    + "public warn(Content) { this._warn(Content); return this; }\n"
	    + "public err(Content) { this._err(Content); return this; }\n"
	    + "public print(Content) { this._print(Content); return this; }\n"
	    + "public println(Content) { this._println(Content); return this; }\n"
	    + "\n"
	    + "// Chained extern functions\n"
	    + "private extern _log(Content);\n"
	    + "private extern _info(Content);\n"
	    + "private extern _warn(Content);\n"
	    + "private extern _err(Content);\n"
	    + "private extern _print(Content);\n"
	    + "private extern _println(Content);\n"
	    + "}\n"
	    + "\n"
	    /*
	     * date
	     */
	    + "extern class date : com.cali.stdlib.CDate {\n"
	    + "// Create new date.\n"
	    + "public date(int Mills = null) {\n"
	    + "return this.newDate(Mills);\n"
	    + "}\n"
	    + "public extern newDate(int Mills = null);\n"
	    + "\n"
	    + "public extern getHours();\n"
	    + "public extern getMinutes();\n"
	    + "public extern getSeconds();\n"
	    + "public extern getTime();\n"
	    + "\n"
	    + "// Chained\n"
	    + "public setHours(int Hours) { this._setHours(Hours); return this; }\n"
	    + "public setMinutes(int Minutes) { this._setMinutes(Minutes); return this; }\n"
	    + "public setSeconds(int Seconds) { this._setSeconds(Seconds); return this; }\n"
	    + "public setTime(int TimeMills) { this._setTime(TimeMills); return this; }\n"
	    + "\n"
	    + "public extern toString();\n"
	    + "public extern parse(string DateString, string DateFormat);\n"
	    + "public extern format(string DateFormat = \"yyyy-MM-dd HH:mm:ss.SSS Z\");\n"
	    + "public extern isEpoch();\n"
	    + "\n"
	    + "// Chained extern functions\n"
	    + "private extern _setHours(int Hours);\n"
	    + "private extern _setMinutes(int Minutes);\n"
	    + "private extern _setSeconds(int Seconds);\n"
	    + "private extern _setTime(int TimeMills);\n"
	    + "}\n"
	    + "\n"
	    /*
	     * charset
	     */
	    + "enum charset {\n"
	    + "us_ascii;\n"
	    + "iso_8859_1;\n"
	    + "utf_8;\n"
	    + "utf_16be;\n"
	    + "utf_16le;\n"
	    + "utf_16;\n"
	    + "}\n"
	    + "\n"
	    /*
	     * byte order
	     */
	    + "enum byteOrder {\n"
	    + "big;\n"
	    + "little;\n"
	    + "}\n"
	    + "\n"
	    /*
	     * buffer
	     */
	    + "extern class buffer : com.cali.stdlib.CBuffer {\n"
	    + "public buffer(int Size = 1024) {\n"
	    + "return this.newBuffer(Size);\n"
	    + "}\n"
	    + "private extern newBuffer(int Size = 1024);\n"
	    + "\n"
	    + "public extern size();\n"
	    + "public clear() { this._clear(); return this; }\n"
	    + "\n"
	    + "// Moves cursor to provided position\n"
	    + "public writeSeek(int Index) { this._writeSeek(Index); return this; }\n"
	    + "public readSeek(int Index) { this._readSeek(Index); return this; }\n"
	    + "\n"
	    + "// address\n"
	    + "public addString(string Str, string Charset = \"utf_8\") { this._addString(Str, Charset); return this; }\n"
	    + "public addByte(int Byte) { this._addByte(Byte); return this; }\n"
	    + "public addUByte(int Byte) { this._addUByte(Byte); return this; }\n"
	    + "public addShort(int Short, string ByteOrder = \"big\") { this._addShort(Short, ByteOrder); return this; }\n"
	    + "public addUShort(int Short, string ByteOrder = \"big\") { this._addUShort(Short, ByteOrder); return this; }\n"
	    + "public addInt(int Int, string ByteOrder = \"big\") { this._addInt(Int, ByteOrder); return this; }\n"
	    + "public addUInt(int Int, string ByteOrder = \"big\") { this._addUInt(Int, ByteOrder); return this; }\n"
	    + "public addLong(int Long, string ByteOrder = \"big\") { this._addLong(Long, ByteOrder); return this; }\n"
	    + "public addFloat(double Float, string ByteOrder = \"big\") { this._addFloat(Float, ByteOrder); return this; }\n"
	    + "public addDouble(double Double, string ByteOrder = \"big\") { this._addDouble(Double, ByteOrder); return this; }\n"
	    + "\n"
	    + "public extern getWriteCursor();\n"
	    + "public extern getReadCursor();\n"
	    + "public extern getString(string Charset = \"utf_8\");\n"
	    + "public extern getStringAt(int Length, int Index = -1, string Charset = \"utf_8\");\n"
	    + "public extern getByte(int Index = -1);\n"
	    + "public extern getUByte(int Index = -1);\n"
	    + "public extern getShort(int Index = -1, string ByteOrder = \"big\");\n"
	    + "public extern getUShort(int Inex = -1, string ByteOrder = \"big\");\n"
	    + "public extern getInt(int Index = -1, string ByteOrder = \"big\");\n"
	    + "public extern getUInt(int Index = -1, string ByteOrder = \"big\");\n"
	    + "public extern getLong(int Index = -1, string ByteOrder = \"big\");\n"
	    + "public extern getFloat(int Index = -1, string ByteOrder = \"big\");\n"
	    + "public extern getDouble(int Index = -1, string ByteOrder = \"big\");\n"
	    + "\n"
	    + "public extern setString(string Str, string Charset = \"utf_8\");\n"
	    + "public extern setStringAt(int Index, string Str, string Charset = \"utf_8\");\n"
	    + "\n"
	    + "// chained\n"
	    + "public setByte(int Index, int Byte, string ByteOrder = \"big\") { this._setByte(Index, Byte, ByteOrder); return this; }\n"
	    + "public setUByte(int Index, int Byte, string ByteOrder = \"big\") { this._setUByte(Index, Byte, ByteOrder); return this; }\n"
	    + "public setShort(int Index, int Short, string ByteOrder = \"big\") { this._setShort(Index, Short, ByteOrder); return this; }\n"
	    + "public setUShort(int Index, int Short, string ByteOrder = \"big\") { this._setUShort(Index, Short, ByteOrder); return this; }\n"
	    + "public setInt(int Index, int Int, string ByteOrder = \"big\") { this._setInt(Index, Int, ByteOrder); return this; }\n"
	    + "public setUInt(int Index, int Int, string ByteOrder = \"big\") { this._setUInt(Index, Int, ByteOrder); return this; }\n"
	    + "public setLong(int Index, int Long, string ByteOrder = \"big\") { this._setLong(Index, Long, ByteOrder); return this; }\n"
	    + "public setFloat(int Index, double Float, string ByteOrder = \"big\") { this._setFloat(Index, Float, ByteOrder); return this; }\n"
	    + "public setDouble(int Index, double Float, string ByteOrder = \"big\") { this._setDouble(Index, Float, ByteOrder); return this; }\n"
	    + "\n"
	    + "public copyFrom(int DestIndex, object Buffer, int SrcIndex = -1, int Length = -1) { this._copyFrom(DestIndex, Buffer, SrcIndex, Length); return this; }\n"
	    + "public copyTo(int SrcIndex, object Buffer, int DestIndex = -1, int Length = -1) { this._copyTo(SrcIndex, Buffer, DestIndex, Length); return this; }\n"
	    + "\n"
	    + "// Binary display functions\n"
	    + "public extern byteToBinary(int Index);\n"
	    + "public extern shortToBinary(int Index, string ByteOrder = \"big\");\n"
	    + "public extern intToBinary(int Index, string ByteOrder = \"big\");\n"
	    + "public extern longToBinary(int Index, string ByteOrder = \"big\");\n"
	    + "public extern floatToBinary(int Index, string ByteOrder = \"big\");\n"
	    + "public extern doubleToBinary(int Index, string ByteOrder = \"big\");\n"
	    + "\n"
	    + "private extern _clear();\n"
	    + "private extern _writeSeek(int Index);\n"
	    + "private extern _readSeek(int Index);\n"
	    + "\n"
	    + "private extern _addString(string Str, string Charset = \"utf_8\");\n"
	    + "private extern _addByte(int Byte);\n"
	    + "private extern _addUByte(int Byte);\n"
	    + "private extern _addShort(int Short, string ByteOrder = \"big\");\n"
	    + "private extern _addUShort(int Short, string ByteOrder = \"big\");\n"
	    + "private extern _addInt(int Int, string ByteOrder = \"big\");\n"
	    + "private extern _addUInt(int Int, string ByteOrder = \"big\");\n"
	    + "private extern _addLong(int Long, string ByteOrder = \"big\");\n"
	    + "private extern _addFloat(double Float, string ByteOrder = \"big\");\n"
	    + "private extern _addDouble(double Double, string ByteOrder = \"big\");\n"
	    + "\n"
	    + "private extern _setByte(int Index, int Byte, string ByteOrder = \"big\");\n"
	    + "private extern _setUByte(int Index, int Byte, string ByteOrder = \"big\");\n"
	    + "private extern _setShort(int Index, int Short, string ByteOrder = \"big\");\n"
	    + "private extern _setUShort(int Index, int Short, string ByteOrder = \"big\");\n"
	    + "private extern _setInt(int Index, int Int, string ByteOrder = \"big\");\n"
	    + "private extern _setUInt(int Index, int Int, string ByteOrder = \"big\");\n"
	    + "private extern _setLong(int Index, int Long, string ByteOrder = \"big\");\n"
	    + "private extern _setFloat(int Index, double Float, string ByteOrder = \"big\");\n"
	    + "private extern _setDouble(int Index, double Float, string ByteOrder = \"big\");\n"
	    + "\n"
	    + "private extern _copyFrom(int DestIndex, object Buffer, int SrcIndex = -1, int Length = -1);\n"
	    + "private extern _copyTo(int SrcIndex, object Buffer, int DestIndex = -1, int Length = -1);\n"
	    + "}\n"
	    + "\n"
	    /*
	     * lang
	     */
	    + "static extern class lang : com.cali.stdlib.CLang {\n"
	    + "public extern type(DataType);\n"
	    + "}\n"
	    + "\n"
	;
	
	public Map<String, String> langIncludes = new ConcurrentHashMap<String, String>();
	
	
	
	private void init() {
		langIncludes.put("sys.ca",
        	"// sys\n"
        	+ "static extern class sys : com.cali.stdlib.CSys {\n"
        	+ "public extern getSysInfo();\n"
        	+ "public extern getAssembly();\n"
        	+ "public extern getAssemblyPath();\n"
        	+ "public extern getCurrentPath();\n"
        	+ "//public extern getMainFilePath();\n"
        	+ "public extern getHomePath();\n"
        	+ "public extern getUserName();\n"
        	+ "public extern getOsArch();\n"
        	+ "public extern getOsName();\n"
        	+ "public extern getOsVersion();\n"
        	+ "public extern getJavaVersion();\n"
        	+ "public extern getJavaVendor();\n"
        	+ "public extern getJavaVendorUrl();\n"
        	+ "public extern getJavaClassPath();\n"
        	+ "public extern getFileSeparator();\n"
        	+ "public extern getLineSeparator();\n"
        	+ "public extern getCaliVersion();\n"
        	+ "public extern getJavaHome();\n"
        	+ "public extern getMills();\n"
        	+ "public sleep(int mills) { this._sleep(mills); return this; }\n"
        	+ "private extern _sleep(int mills);\n"
        	+ "}\n"
        	+ "\n"
        );
		langIncludes.put("reflect.ca", 
        	"// reflect\n"
			+ "static extern class reflect : com.cali.stdlib.CReflect {\n"
		    + "// Reflection functions.\n"
		    + "public evalStr(string CodeStr, string Name = \"evalStr\") { this._evalStr(CodeStr, Name); return this; }\n"
		    + "public evalFile(string FileName) { this._evalFile(FileName); return this; }\n"
		    + "public includeModule(string ModuleName) { this._includeModule(ModuleName); return this; }\n"
		    + "\n"
		    + "// Not Chained\n"
		    + "public extern loadedModules();\n"
		    + "public extern loadedClasses();\n"
		    + "public extern isModuleLoaded(string ModuleName);\n"
		    + "public extern classExists(string ClassName);\n"
		    + "public extern getClassDef(string ClassName);\n"
		    + "public extern instantiate(string ClassName);\n"
		    + "public extern invoke(object Object, string MethodName, ...);\n"
		    + "\n"
		    + "// Chained extern functions\n"
		    + "private extern _evalStr(string CodeStr, string Name = \"evalStr\");\n"
		    + "private extern _evalFile(string FileName);\n"
		    + "private extern _includeModule(string ModuleName);\n"
		    + "}\n"
		    + "\n"
		    + "extern class rclass : com.cali.stdlib.CClass {\n"
		    + "// Class object provided by reflection.\n"
		    + "public extern getName();\n"
		    + "public extern isStatic();\n"
		    + "public extern isExtern();\n"
		    + "public extern getExternClassName();\n"
		    + "public extern getMembers();\n"
		    + "public extern getMethods();\n"
		    + "}\n"
		    + "\n"
        );
		langIncludes.put("cunit.ca", 
        	"include reflect;\n"
        	+ "\n"
        	+ "class test {\n"
        	+ "private tests = [];\n"
        	+ "private passed = 0;\n"
        	+ "private failed = 0;\n"
        	+ "\n"
        	+ "public test() { }\n"
        	+ "\n"
        	+ "private name = \"\";\n"
        	+ "private silent = false;\n"
        	+ "\n"
        	+ "public setName(string Name = \"\") { this.name = Name; return this; }\n"
        	+ "public setSilent(bool Silent) { this.silent = Silent; return this; }\n"
        	+ "\n"
        	+ "public getName() { return this.name; }\n"
        	+ "public getSlient() { return this.silent; }\n"
        	+ "\n"
        	+ "public add(string TestName, callback ToCall, bool DieOnFail = false) {\n"
        	+ "t = {};\n"
        	+ "t.name = TestName;\n"
        	+ "t.cb = ToCall;\n"
        	+ "t.dieOnFail = DieOnFail;\n"
        	+ "this.tests @= t;\n"
        	+ "return this;\n"
        	+ "}\n"
        	+ "\n"
        	+ "public run() {\n"
        	+ "if(!this.silent) {\n"
        	+ "c.print(\"Running Test [\")\n"
        	+ ".print(\" \" + this.name + \" \")\n"
        	+ ".println(\"]:\")\n"
        	+ ";\n"
        	+ "}\n"
        	+ "\n"
        	+ "for(t : this.tests) {\n"
        	+ "if(!this.silent) {\n"
        	+ "c.print(\" ***\")\n"
        	+ ".print(\" \" + t['name'] + \" \")\n"
        	+ ".print(\"... \")\n"
        	+ ";\n"
        	+ "}\n"
        	+ "try {\n"
        	+ "res = t.cb.call();\n"
        	+ "if(res == true) {\n"
        	+ "this.passed++;\n"
        	+ "if(!this.silent) { c.println(\"PASSED\"); }\n"
        	+ "} else {\n"
        	+ "this.failed++;\n"
        	+ "if(!this.silent) { c.println(\"FAILED\"); }\n"
        	+ "if(t['dieOnFail']) { break; }\n"
        	+ "}\n"
        	+ "} catch(e) {\n"
        	+ "this.failed++;\n"
        	+ "if(!this.silent) {\n"
        	+ "c.println(\"FAILED\")\n"
        	+ ".err(e.getMessage() + \"\n\" + e.getTrace())\n"
        	+ ";\n"
        	+ "if(t['dieOnFail']) { break; }\n"
        	+ "}\n"
        	+ "}\n"
        	+ "}\n"
        	+ "if(!this.silent) { this.printResult(); }\n"
        	+ "return this;\n"
        	+ "}\n"
        	+ "\n"
        	+ "private printResult() {\n"
        	+ "c.println(\"\")\n"
        	+ ".print(\"TOTAL:\")\n"
        	+ ".print(\" \" + (#this.tests) + \" \")\n"
        	+ ".print(\"RAN:\")\n"
        	+ ".print(\" \" + (this.passed + this.failed) + \" \")\n"
        	+ ".print(\"PASSED:\")\n"
        	+ ".print(\" \" + this.passed + \" \")\n"
        	+ ";\n"
        	+ "if(this.failed > 0) {\n"
        	+ "c.print(\"FAILED:\")\n"
        	+ ".print(\" \" + this.failed + \" \")\n"
        	+ ";\n"
        	+ "}\n"
        	+ "c.println(\"\n\");\n"
        	+ "return this;\n"
        	+ "}\n"
        	+ "\n"
        	+ "public getResults() {\n"
        	+ "res = {};\n"
        	+ "res['name'] = this.name;\n"
        	+ "res['total'] = #this.tests;\n"
        	+ "res['ran'] = this.passed + this.failed;\n"
        	+ "res['passed'] = this.passed;\n"
        	+ "res['failed'] = this.failed;\n"
        	+ "return res;\n"
        	+ "}\n"
        	+ "\n"
        	+ "public expect(Item, ToBe) { if(Item == ToBe) { return true; } return false; }\n"
        	+ "public expectNotNull(Item) { if(Item == null) { return false; } return true; }\n"
        	+ "public expectNull(Item) { if(Item == null) { return true; } return false; }\n"
        	+ "public expectString(Item) { if(lang.type(Item) == \"string\") { return true; } return false; }\n"
        	+ "public expectBool(Item) { if(lang.type(Item) == \"bool\") { return true; } return false; }\n"
        	+ "public expectInt(Item) { if(lang.type(Item) == \"int\") { return true; } return false; }\n"
        	+ "public expectDouble(Item) { if(lang.type(Item) == \"double\") { return true; } return false; }\n"
        	+ "public expectNumber(Item) { if((lang.type(Item) == \"int\")||(lang.type(Item) == \"double\")) { return true; } return false; }\n"
        	+ "public expectList(Item) { if(lang.type(Item) == \"list\") { return true; } return false; }\n"
        	+ "public expectMap(Item) { if(lang.type(Item) == \"map\") { return true; } return false; }\n"
        	+ "public expectObject(Item, string ClassName) { if(lang.type(Item) == ClassName) { return true; } return false; }\n"
        	+ "public expectCallback(Item) { if(lang.type(Item) == \"callback\") { return true; } return false; }\n"
        	+ "}\n"
        	+ "\n"
        );
		langIncludes.put("math.ca", 
        	"// math\n"
        	+ "static extern class math : com.cali.stdlib.CMath {\n"
        	+ "public extern e();\n"
        	+ "public extern pi();\n"
        	+ "public extern abs(Val);\n"
        	+ "public extern acos(double AngleRad);\n"
        	+ "public extern asin(double AngleRad);\n"
        	+ "public extern atan(double AngleRad);\n"
        	+ "public extern cbrt(double Val);\n"
        	+ "public extern ceil(double Val);\n"
        	+ "public extern copySign(double Magnitude, double Sign);\n"
        	+ "public extern cos(double AngleRad);\n"
        	+ "public extern cosh(double AngleRad);\n"
        	+ "public extern exp(double Val);\n"
        	+ "public extern expm1(double Val);\n"
        	+ "public extern floor(double Val);\n"
        	+ "public extern getExponent(double Val);\n"
        	+ "public extern hypot(double X, double Y);\n"
        	+ "public extern IEEEremainder(double Double1, double Double2);\n"
        	+ "public extern log(double Val);\n"
        	+ "public extern log10(double Val);\n"
        	+ "public extern log1p(double Val);\n"
        	+ "public extern max(Val1, Val2);\n"
        	+ "public extern min(Val1, Val2);\n"
        	+ "public extern nextAfter(double Double1, double Double2);\n"
        	+ "public extern nextUp(double Val);\n"
        	+ "public extern pow(double Double1, double Double2);\n"
        	+ "public extern rand();\n"
        	+ "public extern rint(double Val);\n"
        	+ "public extern round(double Val);\n"
        	+ "public extern scalb(double DoubleVal, int IntVal);\n"
        	+ "public extern signum(double Val);\n"
        	+ "public extern sin(double Val);\n"
        	+ "public extern sinh(double Val);\n"
        	+ "public extern sqrt(double Val);\n"
        	+ "public extern tan(double Val);\n"
        	+ "public extern tanh(double Val);\n"
        	+ "public extern toDeg(double Val);\n"
        	+ "public extern toRad(double Val);\n"
        	+ "public extern ulp(double Val);\n"
        	+ "}\n"
        	+ "\n"
        );
	}
}
